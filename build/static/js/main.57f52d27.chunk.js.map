{"version":3,"sources":["logo.svg","CartContext.js","components/Header.js","components/Image.js","pages/Photos.js","components/CartItem.js","pages/Cart.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","CartContext","React","createContext","ContextProvider","children","useState","allPhotos","setAllPhotos","cartItems","setCartItems","useEffect","fetch","then","res","json","data","Provider","value","toggleFavorite","id","updatedArr","map","photo","console","log","isFavorite","addToCart","newItem","prevItem","removeItemfromCart","prevItems","filter","item","Header","cartClassName","useContext","length","to","className","Image","img","hovered","setHovered","onMouseEnter","onMouseLeave","src","url","onClick","some","Photos","imageElements","i","key","CartItem","width","Cart","buttonText","setButtonText","emptyCart","totalCostDisplay","toLocaleString","style","currency","cartItemElements","setTimeout","App","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.57f52d27.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useState, useEffect } from 'react'\n\nconst CartContext = React.createContext()\n\nfunction ContextProvider({ children }) {\n\n    const [allPhotos, setAllPhotos] = useState([])\n    const [cartItems, setCartItems] = useState([]);\n\n    const url = \"https://raw.githubusercontent.com/bobziroll/scrimba-react-bootcamp-images/master/images.json\"\n    useEffect(() => {\n        fetch(url)\n            .then(res => res.json())\n            .then(data => setAllPhotos(data))\n    }, [])\n\n    function toggleFavorite(id) {\n        const updatedArr = allPhotos.map(photo => {\n            if (photo.id === id) {\n                console.log(id)\n                console.log(!photo.isFavorite)\n                return {...photo, isFavorite: !photo.isFavorite }\n            }\n            return photo\n        })\n\n        setAllPhotos(() => updatedArr);\n    }\n\n    function addToCart(newItem) {\n        setCartItems(prevItem => [...prevItem, newItem]);\n\n    }\n\n    function emptyCart() {\n        setCartItems([]);\n    }\n\n\n    function removeItemfromCart(id) {\n        setCartItems(prevItems => {\n            return prevItems.filter(item => item.id !== id)\n        });\n    }\n\n    return ( < CartContext.Provider value = {\n            { allPhotos, toggleFavorite, addToCart, cartItems, removeItemfromCart }\n        } > { children } <\n        /CartContext.Provider>\n    )\n}\n\nexport { ContextProvider, CartContext }","import React, { useContext} from 'react';\nimport { Link } from 'react-router-dom';\n\nimport { CartContext } from \"../CartContext\";\n\nexport default function Header() {\n    const {cartItems} = useContext(CartContext)\n    const cartClassName = cartItems.length > 0 ? \"ri-shopping-cart-fill\" : \"ri-shopping-cart-line\"\n    return ( <\n        div >\n        <   \n        header >\n        <Link to = \"/photos\" > < h2 > Pic some < /h2> </Link >\n        \n        <Link to = \"/cart\"> \n<i className ={`${cartClassName} ri-fw ri-2x`}> < /i></Link>\n        <\n        /header> \n        </div>\n       \n\n    )\n}","import React, { useState, useContext } from 'react';\n\nimport { CartContext } from \"../CartContext\";\n\n\nexport default function Image({ className, img }) {\n    const [hovered, setHovered] = useState(false)\n\n    const { toggleFavorite, addToCart, cartItems, removeItemfromCart } = useContext(CartContext)\n\n    function heartIcon() {\n        if (img.isFavorite) {\n            return <i className = \"ri-heart-fill favorite\"\n            onClick = {\n                () => toggleFavorite(img.id)\n            } > < /i>\n        } else if (hovered) {\n            return <i className = \"ri-heart-line favorite\"\n            onClick = {\n                () => toggleFavorite(img.id)\n            } > < /i>\n        }\n    }\n    /*const cartIcon = hovered && <i className=\"ri-add-circle-line cart\" onClick={()=>{\n           addToCart(img)\n       }}></i>*/\n\n\n\n    function cartIcon() {\n        const alreadyInCart = cartItems.some(item => item.id === img.id)\n        if (alreadyInCart) {\n            return <i className = \"ri-shopping-cart-fill cart\"\n            onClick = {\n                () => removeItemfromCart(img.id)\n            } > < /i>\n        } else if (hovered) {\n            return <i className = \"ri-add-circle-line cart\"\n            onClick = {\n                () => addToCart(img)\n            } > < /i>\n        }\n    }\n\n    return ( <\n        div className = { `${className} image-container` }\n        onMouseEnter = {\n            () => setHovered(true)\n        }\n        onMouseLeave = {\n            () => setHovered(false)\n        } >\n\n        <\n        img src = { img.url }\n        className = \"image-grid\" / > { heartIcon() } { cartIcon() } <\n        /div>   \n\n    )\n}","import React, { useContext } from 'react';\nimport Image from '../components/Image';\nimport { CartContext } from \"../CartContext\";\n\nexport default function Photos() {\n\n    const { allPhotos } = useContext(CartContext)\n    const imageElements = allPhotos.map((img, i) => {\n        return <Image key = \"img.id\"\n        img = { img }\n        className = \"image\" / >\n    })\n\n    return ( < div className = \"images-container\" > { imageElements } <\n        /div>\n    )\n\n\n}","import React, { useContext} from 'react';\n\nimport { CartContext } from \"../CartContext\";\n\nexport default function CartItem({item}) {\n\nconst {removeItemfromCart} = useContext(CartContext)\n\n\n    return ( \n<div className=\"cart-item\">\n       <i className=\"ri-delete-bin-line\" onClick={()=>removeItemfromCart(item.id)}></i>\n        <img src={item.url} width=\"130px\" />    \n        <p> $5.99</p>    \n        \n </div>\n    )\n}","import React, {useState, useContext } from \"react\";\n\nimport { CartContext } from \"../CartContext\";\n\nimport CartItem from \"../components/CartItem\";\n\nexport default function Cart() {\n    const [buttonText, setButtonText] = useState(\"Place Order\");\n  const { cartItems , emptyCart} = useContext(CartContext);\n  const totalCost = 5.99 * cartItems.length;\n   const totalCostDisplay = totalCost.toLocaleString(\"en-US\", {style: \"currency\", currency: \"USD\"})\n\n   function placeOrder() {\n        setButtonText(\"Ordering...\")\n        setTimeout(() => {\n            console.log(\"Order placed!\")\n            setButtonText(\"Place Order\");\n            emptyCart();\n        }, 3000)\n    }\n    \n\n  const cartItemElements = cartItems.map((item) => (\n    <CartItem key={item.id} item={item} />\n  ));\n\n  return (\n    <div>\n      <h1> Checkout Page </h1> \n      {cartItemElements}\n      <p className=\"total-cost\"> Total: {totalCostDisplay } </p>\n      <div className=\"order-button\">\n        <button onClick={placeOrder}> {buttonText} </button>\n      </div>\n    </div>\n  );\n}\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Header from './components/Header';\nimport { Link, Route, Switch } from 'react-router-dom';\nimport Photos from \"./pages/Photos\";\nimport Cart from \"./pages/Cart\";\n\n\n\nfunction App() {\n    return ( <div className = \"App\" >\n    \n<Header/>\n<Switch>\n<Route path=\"/photos\"><Photos/></Route>\n<Route path=\"/cart\"><Cart/></Route>\n</Switch>\n\n         </div>\n        \n    );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\n\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {ContextProvider} from \"./CartContext\";\nimport App from './App';\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n    Link\n} from \"react-router-dom\";\n\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n<ContextProvider>\n   <Router>\n  <React.StrictMode>\n   \n    \n    <App/>\n    \n    </React.StrictMode>\n     </Router>\n\n    </ContextProvider>\n\n    ,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}